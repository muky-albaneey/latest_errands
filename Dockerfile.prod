
# # Use the specified Node.js version as the base image
# FROM node:20.15.0

# # Create and change to the app directory
# WORKDIR /usr/src/app

# # Copy application dependency manifests to the container image
# COPY package*.json ./

# # Install all dependencies
# RUN npm install

# # Copy local code to the container image
# COPY . .

# # Build the application
# RUN npm run build

# # Prune dev dependencies
# RUN npm prune --production

# # Remove source files if needed
# RUN rm -rf ./src

# # Document that the service listens on port 3001
# EXPOSE 3001

# # Run the web service on container startup
# CMD ["npm", "run", "start:prod"]
# Build stage
# FROM node:20.15.0

# # Create and change to the app directory
# WORKDIR /usr/src/app

# # Copy application dependency manifests to the container image
# COPY package*.json ./

# # Install dependencies
# RUN npm install

# # Install Nest CLI globally (if required)
# RUN npm install -g @nestjs/cli

# # Copy local code to the container image
# COPY . .

# # Expose the port
# EXPOSE 3000

# # Run the web service on container startup
# CMD ["npm", "run", "start:dev"]

# Use an official Node.js image as the base image
# Use a multi-stage build
# Stage 1: Build
FROM node:20.15.0 as builder

# Set environment variable to limit memory usage
ENV NODE_OPTIONS="--max-old-space-size=256"

# Set working directory
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy local code to the container image
COPY . .

# Build the application
RUN npm run build

# Stage 2: Production
FROM node:20.15.0

# Set environment variable to limit memory usage
ENV NODE_OPTIONS="--max-old-space-size=256"

# Set working directory
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image
COPY package*.json ./

# Install only production dependencies
RUN npm install --production

# Copy the build output from the first stage
COPY --from=builder /usr/src/app/dist ./dist

# Expose the port your application runs on
EXPOSE 3000

# Run the application in production mode
CMD ["npm", "run", "start:prod"]

